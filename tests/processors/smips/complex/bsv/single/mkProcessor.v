//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Fri Nov 21 15:38:13 EST 2014
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkProcessor(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // ports of submodule core
  wire [64 : 0] core$mem_dataReqQ_first_READ;
  wire [31 : 0] core$mem_dataQ_enq_WRITE,
		core$mem_instQ_enq_WRITE,
		core$mem_instReqQ_first_READ;
  wire core$mem_dataQ_enq_EN_WRITE,
       core$mem_dataQ_notFull_READ,
       core$mem_dataReqQ_deq_WRITE,
       core$mem_dataReqQ_notEmpty_READ,
       core$mem_instQ_enq_EN_WRITE,
       core$mem_instQ_notFull_READ,
       core$mem_instReqQ_deq_WRITE,
       core$mem_instReqQ_notEmpty_READ;

  // ports of submodule mem
  wire [64 : 0] mem$dataReqQ_first_WRITE;
  wire [31 : 0] mem$dataQ_enq_READ,
		mem$instQ_enq_READ,
		mem$instReqQ_first_WRITE;
  wire mem$dataQ_enq_EN_READ,
       mem$dataQ_notFull_WRITE,
       mem$dataReqQ_deq_READ,
       mem$dataReqQ_notEmpty_WRITE,
       mem$instQ_enq_EN_READ,
       mem$instQ_notFull_WRITE,
       mem$instReqQ_deq_READ,
       mem$instReqQ_notEmpty_WRITE;

  // submodule core
  mkCore core(.CLK(CLK),
	      .RST_N(RST_N),
	      .mem_dataQ_enq_WRITE(core$mem_dataQ_enq_WRITE),
	      .mem_instQ_enq_WRITE(core$mem_instQ_enq_WRITE),
	      .mem_instReqQ_deq_WRITE(core$mem_instReqQ_deq_WRITE),
	      .mem_instQ_enq_EN_WRITE(core$mem_instQ_enq_EN_WRITE),
	      .mem_dataReqQ_deq_WRITE(core$mem_dataReqQ_deq_WRITE),
	      .mem_dataQ_enq_EN_WRITE(core$mem_dataQ_enq_EN_WRITE),
	      .mem_instReqQ_notEmpty_READ(core$mem_instReqQ_notEmpty_READ),
	      .mem_instReqQ_first_READ(core$mem_instReqQ_first_READ),
	      .mem_instQ_notFull_READ(core$mem_instQ_notFull_READ),
	      .mem_dataReqQ_notEmpty_READ(core$mem_dataReqQ_notEmpty_READ),
	      .mem_dataReqQ_first_READ(core$mem_dataReqQ_first_READ),
	      .mem_dataQ_notFull_READ(core$mem_dataQ_notFull_READ));

  // submodule mem
  mkMemory mem(.CLK(CLK),
	       .RST_N(RST_N),
	       .dataQ_notFull_WRITE(mem$dataQ_notFull_WRITE),
	       .dataReqQ_first_WRITE(mem$dataReqQ_first_WRITE),
	       .dataReqQ_notEmpty_WRITE(mem$dataReqQ_notEmpty_WRITE),
	       .instQ_notFull_WRITE(mem$instQ_notFull_WRITE),
	       .instReqQ_first_WRITE(mem$instReqQ_first_WRITE),
	       .instReqQ_notEmpty_WRITE(mem$instReqQ_notEmpty_WRITE),
	       .instReqQ_deq_READ(mem$instReqQ_deq_READ),
	       .instQ_enq_READ(mem$instQ_enq_READ),
	       .instQ_enq_EN_READ(mem$instQ_enq_EN_READ),
	       .dataReqQ_deq_READ(mem$dataReqQ_deq_READ),
	       .dataQ_enq_READ(mem$dataQ_enq_READ),
	       .dataQ_enq_EN_READ(mem$dataQ_enq_EN_READ));

  // submodule core
  assign core$mem_dataQ_enq_WRITE = mem$dataQ_enq_READ ;
  assign core$mem_instQ_enq_WRITE = mem$instQ_enq_READ ;
  assign core$mem_instReqQ_deq_WRITE = mem$instReqQ_deq_READ ;
  assign core$mem_instQ_enq_EN_WRITE = mem$instQ_enq_EN_READ ;
  assign core$mem_dataReqQ_deq_WRITE = mem$dataReqQ_deq_READ ;
  assign core$mem_dataQ_enq_EN_WRITE = mem$dataQ_enq_EN_READ ;

  // submodule mem
  assign mem$dataQ_notFull_WRITE = core$mem_dataQ_notFull_READ ;
  assign mem$dataReqQ_first_WRITE = core$mem_dataReqQ_first_READ ;
  assign mem$dataReqQ_notEmpty_WRITE = core$mem_dataReqQ_notEmpty_READ ;
  assign mem$instQ_notFull_WRITE = core$mem_instQ_notFull_READ ;
  assign mem$instReqQ_first_WRITE = core$mem_instReqQ_first_READ ;
  assign mem$instReqQ_notEmpty_WRITE = core$mem_instReqQ_notEmpty_READ ;
endmodule  // mkProcessor

