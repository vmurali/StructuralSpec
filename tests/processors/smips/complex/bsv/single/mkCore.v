//
// Generated by Bluespec Compiler, version 2014.03.beta2 (build 33633, 2014-03-26)
//
// On Fri Nov 21 15:38:12 EST 2014
//
//
// Ports:
// Name                         I/O  size props
// mem_instReqQ_notEmpty_READ     O     1
// mem_instReqQ_first_READ        O    32
// mem_instQ_notFull_READ         O     1
// mem_dataReqQ_notEmpty_READ     O     1
// mem_dataReqQ_first_READ        O    65
// mem_dataQ_notFull_READ         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// mem_instQ_enq_WRITE            I    32
// mem_dataQ_enq_WRITE            I    32
// mem_instReqQ_deq_WRITE         I     1
// mem_instQ_enq_EN_WRITE         I     1
// mem_dataReqQ_deq_WRITE         I     1
// mem_dataQ_enq_EN_WRITE         I     1
//
// Combinational paths from inputs to outputs:
//   mem_dataReqQ_deq_WRITE -> mem_instQ_notFull_READ
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      mem_instReqQ_notEmpty_READ,

	      mem_instReqQ_first_READ,

	      mem_instReqQ_deq_WRITE,

	      mem_instQ_notFull_READ,

	      mem_instQ_enq_WRITE,
	      mem_instQ_enq_EN_WRITE,

	      mem_dataReqQ_notEmpty_READ,

	      mem_dataReqQ_first_READ,

	      mem_dataReqQ_deq_WRITE,

	      mem_dataQ_notFull_READ,

	      mem_dataQ_enq_WRITE,
	      mem_dataQ_enq_EN_WRITE);
  input  CLK;
  input  RST_N;

  // value method mem_instReqQ_notEmpty__read
  output mem_instReqQ_notEmpty_READ;

  // value method mem_instReqQ_first__read
  output [31 : 0] mem_instReqQ_first_READ;

  // action method mem_instReqQ_deq__read
  input  mem_instReqQ_deq_WRITE;

  // value method mem_instQ_notFull__read
  output mem_instQ_notFull_READ;

  // action method mem_instQ_enq_write
  input  [31 : 0] mem_instQ_enq_WRITE;
  input  mem_instQ_enq_EN_WRITE;

  // value method mem_dataReqQ_notEmpty__read
  output mem_dataReqQ_notEmpty_READ;

  // value method mem_dataReqQ_first__read
  output [64 : 0] mem_dataReqQ_first_READ;

  // action method mem_dataReqQ_deq__read
  input  mem_dataReqQ_deq_WRITE;

  // value method mem_dataQ_notFull__read
  output mem_dataQ_notFull_READ;

  // action method mem_dataQ_enq_write
  input  [31 : 0] mem_dataQ_enq_WRITE;
  input  mem_dataQ_enq_EN_WRITE;

  // signals for module outputs
  wire [64 : 0] mem_dataReqQ_first_READ;
  wire [31 : 0] mem_instReqQ_first_READ;
  wire mem_dataQ_notFull_READ,
       mem_dataReqQ_notEmpty_READ,
       mem_instQ_notFull_READ,
       mem_instReqQ_notEmpty_READ;

  // ports of submodule cop
  wire [36 : 0] cop$write_WRITE;
  wire [31 : 0] cop$read_READ;
  wire cop$write_EN_WRITE;

  // ports of submodule dataQ
  wire [31 : 0] dataQ$deq_first_READ, dataQ$enq_enq_WRITE;
  wire dataQ$deq_deq_WRITE,
       dataQ$deq_notEmpty_READ,
       dataQ$enq_enq_EN_WRITE,
       dataQ$enq_notFull_READ;

  // ports of submodule dataReqQ
  wire [64 : 0] dataReqQ$deq_first_READ, dataReqQ$enq_enq_WRITE;
  wire dataReqQ$deq_deq_WRITE,
       dataReqQ$deq_notEmpty_READ,
       dataReqQ$enq_enq_EN_WRITE,
       dataReqQ$enq_notFull_READ;

  // ports of submodule execute
  wire [64 : 0] execute$dataReqQ_enq_READ;
  wire [37 : 0] execute$wbQ_enq_READ;
  wire [36 : 0] execute$cop_write_READ;
  wire [32 : 0] execute$pcQ_first_WRITE;
  wire [31 : 0] execute$branchPc_READ,
		execute$cop_read_WRITE,
		execute$instQ_first_WRITE,
		execute$regRead_0_resp_WRITE,
		execute$regRead_1_resp_WRITE;
  wire [4 : 0] execute$regRead_0_req_READ,
	       execute$regRead_1_req_READ,
	       execute$wbIndex_WRITE;
  wire execute$branchPc_EN_READ,
       execute$cop_write_EN_READ,
       execute$currEpoch_WRITE,
       execute$dataReqQ_enq_EN_READ,
       execute$dataReqQ_notFull_WRITE,
       execute$instQ_deq_READ,
       execute$instQ_notEmpty_WRITE,
       execute$pcQ_deq_READ,
       execute$pcQ_notEmpty_WRITE,
       execute$regRead_0_req_EN_READ,
       execute$regRead_1_req_EN_READ,
       execute$wbIndex_EN_WRITE,
       execute$wbQ_enq_EN_READ,
       execute$wbQ_notFull_WRITE;

  // ports of submodule fetch
  wire [32 : 0] fetch$pcQ_enq_READ;
  wire [31 : 0] fetch$branchPc_WRITE, fetch$instReqQ_enq_READ;
  wire fetch$branchPc_EN_WRITE,
       fetch$currEpoch_READ,
       fetch$instReqQ_enq_EN_READ,
       fetch$instReqQ_notFull_WRITE,
       fetch$pcQ_enq_EN_READ,
       fetch$pcQ_notFull_WRITE;

  // ports of submodule instQ
  wire [31 : 0] instQ$deq_first_READ, instQ$enq_enq_WRITE;
  wire instQ$deq_deq_WRITE,
       instQ$deq_notEmpty_READ,
       instQ$enq_enq_EN_WRITE,
       instQ$enq_notFull_READ;

  // ports of submodule instReqQ
  wire [31 : 0] instReqQ$deq_first_READ, instReqQ$enq_enq_WRITE;
  wire instReqQ$deq_deq_WRITE,
       instReqQ$deq_notEmpty_READ,
       instReqQ$enq_enq_EN_WRITE,
       instReqQ$enq_notFull_READ;

  // ports of submodule mod__mem__dataQ__enq__dataLocal
  wire [31 : 0] mod__mem__dataQ__enq__dataLocal$IN_WRITE,
		mod__mem__dataQ__enq__dataLocal$OUT_READ;
  wire mod__mem__dataQ__enq__dataLocal$IN_EN_WRITE;

  // ports of submodule mod__mem__dataQ__enq__enLocal
  wire mod__mem__dataQ__enq__enLocal$IN_EN_WRITE,
       mod__mem__dataQ__enq__enLocal$OUT_READ;

  // ports of submodule mod__mem__dataQ__notFull__dataLocal
  wire mod__mem__dataQ__notFull__dataLocal$IN_EN_WRITE,
       mod__mem__dataQ__notFull__dataLocal$IN_WRITE,
       mod__mem__dataQ__notFull__dataLocal$OUT_READ;

  // ports of submodule mod__mem__dataReqQ__deq__dataLocal
  wire mod__mem__dataReqQ__deq__dataLocal$IN_EN_WRITE,
       mod__mem__dataReqQ__deq__dataLocal$OUT_READ;

  // ports of submodule mod__mem__dataReqQ__first__dataLocal
  wire [64 : 0] mod__mem__dataReqQ__first__dataLocal$IN_WRITE,
		mod__mem__dataReqQ__first__dataLocal$OUT_READ;
  wire mod__mem__dataReqQ__first__dataLocal$IN_EN_WRITE;

  // ports of submodule mod__mem__dataReqQ__notEmpty__dataLocal
  wire mod__mem__dataReqQ__notEmpty__dataLocal$IN_EN_WRITE,
       mod__mem__dataReqQ__notEmpty__dataLocal$IN_WRITE,
       mod__mem__dataReqQ__notEmpty__dataLocal$OUT_READ;

  // ports of submodule mod__mem__instQ__enq__dataLocal
  wire [31 : 0] mod__mem__instQ__enq__dataLocal$IN_WRITE,
		mod__mem__instQ__enq__dataLocal$OUT_READ;
  wire mod__mem__instQ__enq__dataLocal$IN_EN_WRITE;

  // ports of submodule mod__mem__instQ__enq__enLocal
  wire mod__mem__instQ__enq__enLocal$IN_EN_WRITE,
       mod__mem__instQ__enq__enLocal$OUT_READ;

  // ports of submodule mod__mem__instQ__notFull__dataLocal
  wire mod__mem__instQ__notFull__dataLocal$IN_EN_WRITE,
       mod__mem__instQ__notFull__dataLocal$IN_WRITE,
       mod__mem__instQ__notFull__dataLocal$OUT_READ;

  // ports of submodule mod__mem__instReqQ__deq__dataLocal
  wire mod__mem__instReqQ__deq__dataLocal$IN_EN_WRITE,
       mod__mem__instReqQ__deq__dataLocal$OUT_READ;

  // ports of submodule mod__mem__instReqQ__first__dataLocal
  wire [31 : 0] mod__mem__instReqQ__first__dataLocal$IN_WRITE,
		mod__mem__instReqQ__first__dataLocal$OUT_READ;
  wire mod__mem__instReqQ__first__dataLocal$IN_EN_WRITE;

  // ports of submodule mod__mem__instReqQ__notEmpty__dataLocal
  wire mod__mem__instReqQ__notEmpty__dataLocal$IN_EN_WRITE,
       mod__mem__instReqQ__notEmpty__dataLocal$IN_WRITE,
       mod__mem__instReqQ__notEmpty__dataLocal$OUT_READ;

  // ports of submodule pcQ
  wire [32 : 0] pcQ$deq_first_READ, pcQ$enq_enq_WRITE;
  wire pcQ$deq_deq_WRITE,
       pcQ$deq_notEmpty_READ,
       pcQ$enq_enq_EN_WRITE,
       pcQ$enq_notFull_READ;

  // ports of submodule regs
  wire [36 : 0] regs$write_WRITE;
  wire [31 : 0] regs$read_0_resp_READ, regs$read_1_resp_READ;
  wire [4 : 0] regs$read_0_req_WRITE, regs$read_1_req_WRITE;
  wire regs$read_0_req_EN_WRITE,
       regs$read_1_req_EN_WRITE,
       regs$write_EN_WRITE;

  // ports of submodule wb
  wire [37 : 0] wb$wb_enq_WRITE;
  wire [36 : 0] wb$regWrite_READ;
  wire [31 : 0] wb$dataQ_first_WRITE;
  wire [4 : 0] wb$wbIndex_READ;
  wire wb$dataQ_deq_READ,
       wb$dataQ_notEmpty_WRITE,
       wb$regWrite_EN_READ,
       wb$wbIndex_EN_READ,
       wb$wb_enq_EN_WRITE,
       wb$wb_notFull_READ;

  // value method mem_instReqQ_notEmpty__read
  assign mem_instReqQ_notEmpty_READ =
	     mod__mem__instReqQ__notEmpty__dataLocal$OUT_READ ;

  // value method mem_instReqQ_first__read
  assign mem_instReqQ_first_READ =
	     mod__mem__instReqQ__first__dataLocal$OUT_READ ;

  // value method mem_instQ_notFull__read
  assign mem_instQ_notFull_READ =
	     mod__mem__instQ__notFull__dataLocal$OUT_READ ;

  // value method mem_dataReqQ_notEmpty__read
  assign mem_dataReqQ_notEmpty_READ =
	     mod__mem__dataReqQ__notEmpty__dataLocal$OUT_READ ;

  // value method mem_dataReqQ_first__read
  assign mem_dataReqQ_first_READ =
	     mod__mem__dataReqQ__first__dataLocal$OUT_READ ;

  // value method mem_dataQ_notFull__read
  assign mem_dataQ_notFull_READ =
	     mod__mem__dataQ__notFull__dataLocal$OUT_READ ;

  // submodule cop
  mkCop cop(.CLK(CLK),
	    .RST_N(RST_N),
	    .write_WRITE(cop$write_WRITE),
	    .write_EN_WRITE(cop$write_EN_WRITE),
	    .read_READ(cop$read_READ));

  // submodule dataQ
  mkDataQ dataQ(.CLK(CLK),
		.RST_N(RST_N),
		.enq_enq_WRITE(dataQ$enq_enq_WRITE),
		.enq_enq_EN_WRITE(dataQ$enq_enq_EN_WRITE),
		.deq_deq_WRITE(dataQ$deq_deq_WRITE),
		.enq_notFull_READ(dataQ$enq_notFull_READ),
		.deq_notEmpty_READ(dataQ$deq_notEmpty_READ),
		.deq_first_READ(dataQ$deq_first_READ));

  // submodule dataReqQ
  mkDataReqQ dataReqQ(.CLK(CLK),
		      .RST_N(RST_N),
		      .enq_enq_WRITE(dataReqQ$enq_enq_WRITE),
		      .enq_enq_EN_WRITE(dataReqQ$enq_enq_EN_WRITE),
		      .deq_deq_WRITE(dataReqQ$deq_deq_WRITE),
		      .enq_notFull_READ(dataReqQ$enq_notFull_READ),
		      .deq_notEmpty_READ(dataReqQ$deq_notEmpty_READ),
		      .deq_first_READ(dataReqQ$deq_first_READ));

  // submodule execute
  mkExecute execute(.CLK(CLK),
		    .RST_N(RST_N),
		    .cop_read_WRITE(execute$cop_read_WRITE),
		    .currEpoch_WRITE(execute$currEpoch_WRITE),
		    .dataReqQ_notFull_WRITE(execute$dataReqQ_notFull_WRITE),
		    .instQ_first_WRITE(execute$instQ_first_WRITE),
		    .instQ_notEmpty_WRITE(execute$instQ_notEmpty_WRITE),
		    .pcQ_first_WRITE(execute$pcQ_first_WRITE),
		    .pcQ_notEmpty_WRITE(execute$pcQ_notEmpty_WRITE),
		    .regRead_0_resp_WRITE(execute$regRead_0_resp_WRITE),
		    .regRead_1_resp_WRITE(execute$regRead_1_resp_WRITE),
		    .wbIndex_WRITE(execute$wbIndex_WRITE),
		    .wbQ_notFull_WRITE(execute$wbQ_notFull_WRITE),
		    .wbIndex_EN_WRITE(execute$wbIndex_EN_WRITE),
		    .pcQ_deq_READ(execute$pcQ_deq_READ),
		    .instQ_deq_READ(execute$instQ_deq_READ),
		    .dataReqQ_enq_READ(execute$dataReqQ_enq_READ),
		    .dataReqQ_enq_EN_READ(execute$dataReqQ_enq_EN_READ),
		    .regRead_0_req_READ(execute$regRead_0_req_READ),
		    .regRead_0_req_EN_READ(execute$regRead_0_req_EN_READ),
		    .regRead_1_req_READ(execute$regRead_1_req_READ),
		    .regRead_1_req_EN_READ(execute$regRead_1_req_EN_READ),
		    .wbQ_enq_READ(execute$wbQ_enq_READ),
		    .wbQ_enq_EN_READ(execute$wbQ_enq_EN_READ),
		    .branchPc_READ(execute$branchPc_READ),
		    .branchPc_EN_READ(execute$branchPc_EN_READ),
		    .cop_write_READ(execute$cop_write_READ),
		    .cop_write_EN_READ(execute$cop_write_EN_READ));

  // submodule fetch
  mkFetch fetch(.CLK(CLK),
		.RST_N(RST_N),
		.branchPc_WRITE(fetch$branchPc_WRITE),
		.instReqQ_notFull_WRITE(fetch$instReqQ_notFull_WRITE),
		.pcQ_notFull_WRITE(fetch$pcQ_notFull_WRITE),
		.branchPc_EN_WRITE(fetch$branchPc_EN_WRITE),
		.currEpoch_READ(fetch$currEpoch_READ),
		.pcQ_enq_READ(fetch$pcQ_enq_READ),
		.pcQ_enq_EN_READ(fetch$pcQ_enq_EN_READ),
		.instReqQ_enq_READ(fetch$instReqQ_enq_READ),
		.instReqQ_enq_EN_READ(fetch$instReqQ_enq_EN_READ));

  // submodule instQ
  mkInstQ instQ(.CLK(CLK),
		.RST_N(RST_N),
		.enq_enq_WRITE(instQ$enq_enq_WRITE),
		.enq_enq_EN_WRITE(instQ$enq_enq_EN_WRITE),
		.deq_deq_WRITE(instQ$deq_deq_WRITE),
		.enq_notFull_READ(instQ$enq_notFull_READ),
		.deq_notEmpty_READ(instQ$deq_notEmpty_READ),
		.deq_first_READ(instQ$deq_first_READ));

  // submodule instReqQ
  mkInstReqQ instReqQ(.CLK(CLK),
		      .RST_N(RST_N),
		      .enq_enq_WRITE(instReqQ$enq_enq_WRITE),
		      .enq_enq_EN_WRITE(instReqQ$enq_enq_EN_WRITE),
		      .deq_deq_WRITE(instReqQ$deq_deq_WRITE),
		      .enq_notFull_READ(instReqQ$enq_notFull_READ),
		      .deq_notEmpty_READ(instReqQ$deq_notEmpty_READ),
		      .deq_first_READ(instReqQ$deq_first_READ));

  // submodule mod__mem__dataQ__enq__dataLocal
  mkWire #( /*width*/ 32'd32) mod__mem__dataQ__enq__dataLocal(.IN_WRITE(mod__mem__dataQ__enq__dataLocal$IN_WRITE),
							      .IN_EN_WRITE(mod__mem__dataQ__enq__dataLocal$IN_EN_WRITE),
							      .OUT_READ(mod__mem__dataQ__enq__dataLocal$OUT_READ));

  // submodule mod__mem__dataQ__enq__enLocal
  mkPulse mod__mem__dataQ__enq__enLocal(.IN_EN_WRITE(mod__mem__dataQ__enq__enLocal$IN_EN_WRITE),
					.OUT_READ(mod__mem__dataQ__enq__enLocal$OUT_READ));

  // submodule mod__mem__dataQ__notFull__dataLocal
  mkWire #( /*width*/ 32'd1) mod__mem__dataQ__notFull__dataLocal(.IN_WRITE(mod__mem__dataQ__notFull__dataLocal$IN_WRITE),
								 .IN_EN_WRITE(mod__mem__dataQ__notFull__dataLocal$IN_EN_WRITE),
								 .OUT_READ(mod__mem__dataQ__notFull__dataLocal$OUT_READ));

  // submodule mod__mem__dataReqQ__deq__dataLocal
  mkPulse mod__mem__dataReqQ__deq__dataLocal(.IN_EN_WRITE(mod__mem__dataReqQ__deq__dataLocal$IN_EN_WRITE),
					     .OUT_READ(mod__mem__dataReqQ__deq__dataLocal$OUT_READ));

  // submodule mod__mem__dataReqQ__first__dataLocal
  mkWire #( /*width*/ 32'd65) mod__mem__dataReqQ__first__dataLocal(.IN_WRITE(mod__mem__dataReqQ__first__dataLocal$IN_WRITE),
								   .IN_EN_WRITE(mod__mem__dataReqQ__first__dataLocal$IN_EN_WRITE),
								   .OUT_READ(mod__mem__dataReqQ__first__dataLocal$OUT_READ));

  // submodule mod__mem__dataReqQ__notEmpty__dataLocal
  mkWire #( /*width*/ 32'd1) mod__mem__dataReqQ__notEmpty__dataLocal(.IN_WRITE(mod__mem__dataReqQ__notEmpty__dataLocal$IN_WRITE),
								     .IN_EN_WRITE(mod__mem__dataReqQ__notEmpty__dataLocal$IN_EN_WRITE),
								     .OUT_READ(mod__mem__dataReqQ__notEmpty__dataLocal$OUT_READ));

  // submodule mod__mem__instQ__enq__dataLocal
  mkWire #( /*width*/ 32'd32) mod__mem__instQ__enq__dataLocal(.IN_WRITE(mod__mem__instQ__enq__dataLocal$IN_WRITE),
							      .IN_EN_WRITE(mod__mem__instQ__enq__dataLocal$IN_EN_WRITE),
							      .OUT_READ(mod__mem__instQ__enq__dataLocal$OUT_READ));

  // submodule mod__mem__instQ__enq__enLocal
  mkPulse mod__mem__instQ__enq__enLocal(.IN_EN_WRITE(mod__mem__instQ__enq__enLocal$IN_EN_WRITE),
					.OUT_READ(mod__mem__instQ__enq__enLocal$OUT_READ));

  // submodule mod__mem__instQ__notFull__dataLocal
  mkWire #( /*width*/ 32'd1) mod__mem__instQ__notFull__dataLocal(.IN_WRITE(mod__mem__instQ__notFull__dataLocal$IN_WRITE),
								 .IN_EN_WRITE(mod__mem__instQ__notFull__dataLocal$IN_EN_WRITE),
								 .OUT_READ(mod__mem__instQ__notFull__dataLocal$OUT_READ));

  // submodule mod__mem__instReqQ__deq__dataLocal
  mkPulse mod__mem__instReqQ__deq__dataLocal(.IN_EN_WRITE(mod__mem__instReqQ__deq__dataLocal$IN_EN_WRITE),
					     .OUT_READ(mod__mem__instReqQ__deq__dataLocal$OUT_READ));

  // submodule mod__mem__instReqQ__first__dataLocal
  mkWire #( /*width*/ 32'd32) mod__mem__instReqQ__first__dataLocal(.IN_WRITE(mod__mem__instReqQ__first__dataLocal$IN_WRITE),
								   .IN_EN_WRITE(mod__mem__instReqQ__first__dataLocal$IN_EN_WRITE),
								   .OUT_READ(mod__mem__instReqQ__first__dataLocal$OUT_READ));

  // submodule mod__mem__instReqQ__notEmpty__dataLocal
  mkWire #( /*width*/ 32'd1) mod__mem__instReqQ__notEmpty__dataLocal(.IN_WRITE(mod__mem__instReqQ__notEmpty__dataLocal$IN_WRITE),
								     .IN_EN_WRITE(mod__mem__instReqQ__notEmpty__dataLocal$IN_EN_WRITE),
								     .OUT_READ(mod__mem__instReqQ__notEmpty__dataLocal$OUT_READ));

  // submodule pcQ
  mkPcQ pcQ(.CLK(CLK),
	    .RST_N(RST_N),
	    .enq_enq_WRITE(pcQ$enq_enq_WRITE),
	    .enq_enq_EN_WRITE(pcQ$enq_enq_EN_WRITE),
	    .deq_deq_WRITE(pcQ$deq_deq_WRITE),
	    .enq_notFull_READ(pcQ$enq_notFull_READ),
	    .deq_notEmpty_READ(pcQ$deq_notEmpty_READ),
	    .deq_first_READ(pcQ$deq_first_READ));

  // submodule regs
  mkRegisters regs(.CLK(CLK),
		   .RST_N(RST_N),
		   .read_0_req_WRITE(regs$read_0_req_WRITE),
		   .read_1_req_WRITE(regs$read_1_req_WRITE),
		   .write_WRITE(regs$write_WRITE),
		   .read_0_req_EN_WRITE(regs$read_0_req_EN_WRITE),
		   .read_1_req_EN_WRITE(regs$read_1_req_EN_WRITE),
		   .write_EN_WRITE(regs$write_EN_WRITE),
		   .read_0_resp_READ(regs$read_0_resp_READ),
		   .read_1_resp_READ(regs$read_1_resp_READ));

  // submodule wb
  mkWriteback wb(.CLK(CLK),
		 .RST_N(RST_N),
		 .dataQ_first_WRITE(wb$dataQ_first_WRITE),
		 .dataQ_notEmpty_WRITE(wb$dataQ_notEmpty_WRITE),
		 .wb_enq_WRITE(wb$wb_enq_WRITE),
		 .wb_enq_EN_WRITE(wb$wb_enq_EN_WRITE),
		 .wb_notFull_READ(wb$wb_notFull_READ),
		 .wbIndex_READ(wb$wbIndex_READ),
		 .wbIndex_EN_READ(wb$wbIndex_EN_READ),
		 .dataQ_deq_READ(wb$dataQ_deq_READ),
		 .regWrite_READ(wb$regWrite_READ),
		 .regWrite_EN_READ(wb$regWrite_EN_READ));

  // submodule cop
  assign cop$write_WRITE = execute$cop_write_READ ;
  assign cop$write_EN_WRITE = execute$cop_write_EN_READ ;

  // submodule dataQ
  assign dataQ$enq_enq_WRITE = mod__mem__dataQ__enq__dataLocal$OUT_READ ;
  assign dataQ$enq_enq_EN_WRITE = mod__mem__dataQ__enq__enLocal$OUT_READ ;
  assign dataQ$deq_deq_WRITE = wb$dataQ_deq_READ ;

  // submodule dataReqQ
  assign dataReqQ$enq_enq_WRITE = execute$dataReqQ_enq_READ ;
  assign dataReqQ$enq_enq_EN_WRITE = execute$dataReqQ_enq_EN_READ ;
  assign dataReqQ$deq_deq_WRITE =
	     mod__mem__dataReqQ__deq__dataLocal$OUT_READ ;

  // submodule execute
  assign execute$cop_read_WRITE = cop$read_READ ;
  assign execute$currEpoch_WRITE = fetch$currEpoch_READ ;
  assign execute$dataReqQ_notFull_WRITE = dataReqQ$enq_notFull_READ ;
  assign execute$instQ_first_WRITE = instQ$deq_first_READ ;
  assign execute$instQ_notEmpty_WRITE = instQ$deq_notEmpty_READ ;
  assign execute$pcQ_first_WRITE = pcQ$deq_first_READ ;
  assign execute$pcQ_notEmpty_WRITE = pcQ$deq_notEmpty_READ ;
  assign execute$regRead_0_resp_WRITE = regs$read_0_resp_READ ;
  assign execute$regRead_1_resp_WRITE = regs$read_1_resp_READ ;
  assign execute$wbIndex_WRITE = wb$wbIndex_READ ;
  assign execute$wbQ_notFull_WRITE = wb$wb_notFull_READ ;
  assign execute$wbIndex_EN_WRITE = wb$wbIndex_EN_READ ;

  // submodule fetch
  assign fetch$branchPc_WRITE = execute$branchPc_READ ;
  assign fetch$instReqQ_notFull_WRITE = instReqQ$enq_notFull_READ ;
  assign fetch$pcQ_notFull_WRITE = pcQ$enq_notFull_READ ;
  assign fetch$branchPc_EN_WRITE = execute$branchPc_EN_READ ;

  // submodule instQ
  assign instQ$enq_enq_WRITE = mod__mem__instQ__enq__dataLocal$OUT_READ ;
  assign instQ$enq_enq_EN_WRITE = mod__mem__instQ__enq__enLocal$OUT_READ ;
  assign instQ$deq_deq_WRITE = execute$instQ_deq_READ ;

  // submodule instReqQ
  assign instReqQ$enq_enq_WRITE = fetch$instReqQ_enq_READ ;
  assign instReqQ$enq_enq_EN_WRITE = fetch$instReqQ_enq_EN_READ ;
  assign instReqQ$deq_deq_WRITE =
	     mod__mem__instReqQ__deq__dataLocal$OUT_READ ;

  // submodule mod__mem__dataQ__enq__dataLocal
  assign mod__mem__dataQ__enq__dataLocal$IN_WRITE = mem_dataQ_enq_WRITE ;
  assign mod__mem__dataQ__enq__dataLocal$IN_EN_WRITE =
	     mem_dataQ_enq_EN_WRITE ;

  // submodule mod__mem__dataQ__enq__enLocal
  assign mod__mem__dataQ__enq__enLocal$IN_EN_WRITE = mem_dataQ_enq_EN_WRITE ;

  // submodule mod__mem__dataQ__notFull__dataLocal
  assign mod__mem__dataQ__notFull__dataLocal$IN_WRITE =
	     dataQ$enq_notFull_READ ;
  assign mod__mem__dataQ__notFull__dataLocal$IN_EN_WRITE = 1'd1 ;

  // submodule mod__mem__dataReqQ__deq__dataLocal
  assign mod__mem__dataReqQ__deq__dataLocal$IN_EN_WRITE =
	     mem_dataReqQ_deq_WRITE ;

  // submodule mod__mem__dataReqQ__first__dataLocal
  assign mod__mem__dataReqQ__first__dataLocal$IN_WRITE =
	     dataReqQ$deq_first_READ ;
  assign mod__mem__dataReqQ__first__dataLocal$IN_EN_WRITE = 1'd1 ;

  // submodule mod__mem__dataReqQ__notEmpty__dataLocal
  assign mod__mem__dataReqQ__notEmpty__dataLocal$IN_WRITE =
	     dataReqQ$deq_notEmpty_READ ;
  assign mod__mem__dataReqQ__notEmpty__dataLocal$IN_EN_WRITE = 1'd1 ;

  // submodule mod__mem__instQ__enq__dataLocal
  assign mod__mem__instQ__enq__dataLocal$IN_WRITE = mem_instQ_enq_WRITE ;
  assign mod__mem__instQ__enq__dataLocal$IN_EN_WRITE =
	     mem_instQ_enq_EN_WRITE ;

  // submodule mod__mem__instQ__enq__enLocal
  assign mod__mem__instQ__enq__enLocal$IN_EN_WRITE = mem_instQ_enq_EN_WRITE ;

  // submodule mod__mem__instQ__notFull__dataLocal
  assign mod__mem__instQ__notFull__dataLocal$IN_WRITE =
	     instQ$enq_notFull_READ ;
  assign mod__mem__instQ__notFull__dataLocal$IN_EN_WRITE = 1'd1 ;

  // submodule mod__mem__instReqQ__deq__dataLocal
  assign mod__mem__instReqQ__deq__dataLocal$IN_EN_WRITE =
	     mem_instReqQ_deq_WRITE ;

  // submodule mod__mem__instReqQ__first__dataLocal
  assign mod__mem__instReqQ__first__dataLocal$IN_WRITE =
	     instReqQ$deq_first_READ ;
  assign mod__mem__instReqQ__first__dataLocal$IN_EN_WRITE = 1'd1 ;

  // submodule mod__mem__instReqQ__notEmpty__dataLocal
  assign mod__mem__instReqQ__notEmpty__dataLocal$IN_WRITE =
	     instReqQ$deq_notEmpty_READ ;
  assign mod__mem__instReqQ__notEmpty__dataLocal$IN_EN_WRITE = 1'd1 ;

  // submodule pcQ
  assign pcQ$enq_enq_WRITE = fetch$pcQ_enq_READ ;
  assign pcQ$enq_enq_EN_WRITE = fetch$pcQ_enq_EN_READ ;
  assign pcQ$deq_deq_WRITE = execute$pcQ_deq_READ ;

  // submodule regs
  assign regs$read_0_req_WRITE = execute$regRead_0_req_READ ;
  assign regs$read_1_req_WRITE = execute$regRead_1_req_READ ;
  assign regs$write_WRITE = wb$regWrite_READ ;
  assign regs$read_0_req_EN_WRITE = execute$regRead_0_req_EN_READ ;
  assign regs$read_1_req_EN_WRITE = execute$regRead_1_req_EN_READ ;
  assign regs$write_EN_WRITE = wb$regWrite_EN_READ ;

  // submodule wb
  assign wb$dataQ_first_WRITE = dataQ$deq_first_READ ;
  assign wb$dataQ_notEmpty_WRITE = dataQ$deq_notEmpty_READ ;
  assign wb$wb_enq_WRITE = execute$wbQ_enq_READ ;
  assign wb$wb_enq_EN_WRITE = execute$wbQ_enq_EN_READ ;
endmodule  // mkCore

