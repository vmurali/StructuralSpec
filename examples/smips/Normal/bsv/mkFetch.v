//
// Generated by Bluespec Compiler, version 2010.09.beta1 (build 21838, 2010-09-08)
//
// On Sat Mar 26 16:25:38 EDT 2011
//
// Method conflict info:
// Method: currEpoch__read
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ_en__read
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ_rdy__write
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: pcQ_rdy__write
//
// Method: pcQ_data__read_fst
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ_data__read_snd
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ__read_fst
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ__read_snd
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ_specCycleInputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ_specCycleOutputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: pcQ_isSupplied
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: instReqQ_en__read
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: instReqQ_rdy__write
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: instReqQ_rdy__write
//
// Method: instReqQ_data__read
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: instReqQ__read
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: instReqQ_specCycleInputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: instReqQ_specCycleOutputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: instReqQ_isSupplied
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: branchPc_en__read
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: branchPc_en__read, branchPc_data__write, branchPc__write
//
// Method: branchPc_data__write
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: branchPc_en__read, branchPc_data__write, branchPc__write
//
// Method: branchPc__write
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: branchPc_en__read, branchPc_data__write, branchPc__write
//
// Method: branchPc_specCycleInputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: branchPc_specCycleOutputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: branchPc_isSupplied
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: specCycleInputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: specCycleOutputDone
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: isSupplied
// Conflict-free: currEpoch__read,
// 	       pcQ_en__read,
// 	       pcQ_rdy__write,
// 	       pcQ_data__read_fst,
// 	       pcQ_data__read_snd,
// 	       pcQ__read_fst,
// 	       pcQ__read_snd,
// 	       pcQ_specCycleInputDone,
// 	       pcQ_specCycleOutputDone,
// 	       pcQ_isSupplied,
// 	       instReqQ_en__read,
// 	       instReqQ_rdy__write,
// 	       instReqQ_data__read,
// 	       instReqQ__read,
// 	       instReqQ_specCycleInputDone,
// 	       instReqQ_specCycleOutputDone,
// 	       instReqQ_isSupplied,
// 	       branchPc_en__read,
// 	       branchPc_data__write,
// 	       branchPc__write,
// 	       branchPc_specCycleInputDone,
// 	       branchPc_specCycleOutputDone,
// 	       branchPc_isSupplied,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
//
// Ports:
// Name                         I/O  size props
// currEpoch__read                O     1
// RDY_currEpoch__read            O     1 const
// pcQ_en__read                   O     1
// RDY_pcQ_en__read               O     1 const
// RDY_pcQ_rdy__write             O     1 const
// pcQ_data__read_fst             O    32
// RDY_pcQ_data__read_fst         O     1 const
// pcQ_data__read_snd             O     1
// RDY_pcQ_data__read_snd         O     1 const
// pcQ__read_fst                  O    32
// RDY_pcQ__read_fst              O     1 const
// pcQ__read_snd                  O     1
// RDY_pcQ__read_snd              O     1 const
// RDY_pcQ_specCycleInputDone     O     1 const
// RDY_pcQ_specCycleOutputDone    O     1 const
// pcQ_isSupplied                 O     1 const
// RDY_pcQ_isSupplied             O     1 const
// instReqQ_en__read              O     1
// RDY_instReqQ_en__read          O     1 const
// RDY_instReqQ_rdy__write        O     1 const
// instReqQ_data__read            O    32
// RDY_instReqQ_data__read        O     1 const
// instReqQ__read                 O    32
// RDY_instReqQ__read             O     1 const
// RDY_instReqQ_specCycleInputDone  O     1 const
// RDY_instReqQ_specCycleOutputDone  O     1 const
// instReqQ_isSupplied            O     1 const
// RDY_instReqQ_isSupplied        O     1 const
// RDY_branchPc_en__read          O     1 const
// RDY_branchPc_data__write       O     1 const
// RDY_branchPc__write            O     1 const
// RDY_branchPc_specCycleInputDone  O     1 const
// RDY_branchPc_specCycleOutputDone  O     1 const
// branchPc_isSupplied            O     1 const
// RDY_branchPc_isSupplied        O     1 const
// RDY_specCycleInputDone         O     1 const
// RDY_specCycleOutputDone        O     1 const
// isSupplied                     O     1 const
// RDY_isSupplied                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// pcQ_rdy__write_x               I     1
// instReqQ_rdy__write_x          I     1
// branchPc_data__write_x         I    32
// branchPc__write_x              I    32
// EN_pcQ_rdy__write              I     1
// EN_pcQ_specCycleInputDone      I     1 unused
// EN_pcQ_specCycleOutputDone     I     1 unused
// EN_instReqQ_rdy__write         I     1
// EN_instReqQ_specCycleInputDone  I     1 unused
// EN_instReqQ_specCycleOutputDone  I     1 unused
// EN_branchPc_en__read           I     1
// EN_branchPc_data__write        I     1
// EN_branchPc__write             I     1
// EN_branchPc_specCycleInputDone  I     1 unused
// EN_branchPc_specCycleOutputDone  I     1 unused
// EN_specCycleInputDone          I     1 unused
// EN_specCycleOutputDone         I     1 unused
//
// Combinational paths from inputs to outputs:
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> pcQ_en__read
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> pcQ_data__read_fst
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> pcQ_data__read_snd
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> pcQ__read_fst
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> pcQ__read_snd
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> instReqQ_en__read
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> instReqQ_data__read
//   (pcQ_rdy__write_x,
//    instReqQ_rdy__write_x,
//    EN_pcQ_rdy__write,
//    EN_instReqQ_rdy__write) -> instReqQ__read
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkFetch(CLK,
	       RST_N,

	       currEpoch__read,
	       RDY_currEpoch__read,

	       pcQ_en__read,
	       RDY_pcQ_en__read,

	       pcQ_rdy__write_x,
	       EN_pcQ_rdy__write,
	       RDY_pcQ_rdy__write,

	       pcQ_data__read_fst,
	       RDY_pcQ_data__read_fst,

	       pcQ_data__read_snd,
	       RDY_pcQ_data__read_snd,

	       pcQ__read_fst,
	       RDY_pcQ__read_fst,

	       pcQ__read_snd,
	       RDY_pcQ__read_snd,

	       EN_pcQ_specCycleInputDone,
	       RDY_pcQ_specCycleInputDone,

	       EN_pcQ_specCycleOutputDone,
	       RDY_pcQ_specCycleOutputDone,

	       pcQ_isSupplied,
	       RDY_pcQ_isSupplied,

	       instReqQ_en__read,
	       RDY_instReqQ_en__read,

	       instReqQ_rdy__write_x,
	       EN_instReqQ_rdy__write,
	       RDY_instReqQ_rdy__write,

	       instReqQ_data__read,
	       RDY_instReqQ_data__read,

	       instReqQ__read,
	       RDY_instReqQ__read,

	       EN_instReqQ_specCycleInputDone,
	       RDY_instReqQ_specCycleInputDone,

	       EN_instReqQ_specCycleOutputDone,
	       RDY_instReqQ_specCycleOutputDone,

	       instReqQ_isSupplied,
	       RDY_instReqQ_isSupplied,

	       EN_branchPc_en__read,
	       RDY_branchPc_en__read,

	       branchPc_data__write_x,
	       EN_branchPc_data__write,
	       RDY_branchPc_data__write,

	       branchPc__write_x,
	       EN_branchPc__write,
	       RDY_branchPc__write,

	       EN_branchPc_specCycleInputDone,
	       RDY_branchPc_specCycleInputDone,

	       EN_branchPc_specCycleOutputDone,
	       RDY_branchPc_specCycleOutputDone,

	       branchPc_isSupplied,
	       RDY_branchPc_isSupplied,

	       EN_specCycleInputDone,
	       RDY_specCycleInputDone,

	       EN_specCycleOutputDone,
	       RDY_specCycleOutputDone,

	       isSupplied,
	       RDY_isSupplied);
  input  CLK;
  input  RST_N;

  // value method currEpoch__read
  output currEpoch__read;
  output RDY_currEpoch__read;

  // value method pcQ_en__read
  output pcQ_en__read;
  output RDY_pcQ_en__read;

  // action method pcQ_rdy__write
  input  pcQ_rdy__write_x;
  input  EN_pcQ_rdy__write;
  output RDY_pcQ_rdy__write;

  // value method pcQ_data__read_fst
  output [31 : 0] pcQ_data__read_fst;
  output RDY_pcQ_data__read_fst;

  // value method pcQ_data__read_snd
  output pcQ_data__read_snd;
  output RDY_pcQ_data__read_snd;

  // value method pcQ__read_fst
  output [31 : 0] pcQ__read_fst;
  output RDY_pcQ__read_fst;

  // value method pcQ__read_snd
  output pcQ__read_snd;
  output RDY_pcQ__read_snd;

  // action method pcQ_specCycleInputDone
  input  EN_pcQ_specCycleInputDone;
  output RDY_pcQ_specCycleInputDone;

  // action method pcQ_specCycleOutputDone
  input  EN_pcQ_specCycleOutputDone;
  output RDY_pcQ_specCycleOutputDone;

  // value method pcQ_isSupplied
  output pcQ_isSupplied;
  output RDY_pcQ_isSupplied;

  // value method instReqQ_en__read
  output instReqQ_en__read;
  output RDY_instReqQ_en__read;

  // action method instReqQ_rdy__write
  input  instReqQ_rdy__write_x;
  input  EN_instReqQ_rdy__write;
  output RDY_instReqQ_rdy__write;

  // value method instReqQ_data__read
  output [31 : 0] instReqQ_data__read;
  output RDY_instReqQ_data__read;

  // value method instReqQ__read
  output [31 : 0] instReqQ__read;
  output RDY_instReqQ__read;

  // action method instReqQ_specCycleInputDone
  input  EN_instReqQ_specCycleInputDone;
  output RDY_instReqQ_specCycleInputDone;

  // action method instReqQ_specCycleOutputDone
  input  EN_instReqQ_specCycleOutputDone;
  output RDY_instReqQ_specCycleOutputDone;

  // value method instReqQ_isSupplied
  output instReqQ_isSupplied;
  output RDY_instReqQ_isSupplied;

  // action method branchPc_en__read
  input  EN_branchPc_en__read;
  output RDY_branchPc_en__read;

  // action method branchPc_data__write
  input  [31 : 0] branchPc_data__write_x;
  input  EN_branchPc_data__write;
  output RDY_branchPc_data__write;

  // action method branchPc__write
  input  [31 : 0] branchPc__write_x;
  input  EN_branchPc__write;
  output RDY_branchPc__write;

  // action method branchPc_specCycleInputDone
  input  EN_branchPc_specCycleInputDone;
  output RDY_branchPc_specCycleInputDone;

  // action method branchPc_specCycleOutputDone
  input  EN_branchPc_specCycleOutputDone;
  output RDY_branchPc_specCycleOutputDone;

  // value method branchPc_isSupplied
  output branchPc_isSupplied;
  output RDY_branchPc_isSupplied;

  // action method specCycleInputDone
  input  EN_specCycleInputDone;
  output RDY_specCycleInputDone;

  // action method specCycleOutputDone
  input  EN_specCycleOutputDone;
  output RDY_specCycleOutputDone;

  // value method isSupplied
  output isSupplied;
  output RDY_isSupplied;

  // signals for module outputs
  wire [31 : 0] instReqQ__read,
		instReqQ_data__read,
		pcQ__read_fst,
		pcQ_data__read_fst;
  wire RDY_branchPc__write,
       RDY_branchPc_data__write,
       RDY_branchPc_en__read,
       RDY_branchPc_isSupplied,
       RDY_branchPc_specCycleInputDone,
       RDY_branchPc_specCycleOutputDone,
       RDY_currEpoch__read,
       RDY_instReqQ__read,
       RDY_instReqQ_data__read,
       RDY_instReqQ_en__read,
       RDY_instReqQ_isSupplied,
       RDY_instReqQ_rdy__write,
       RDY_instReqQ_specCycleInputDone,
       RDY_instReqQ_specCycleOutputDone,
       RDY_isSupplied,
       RDY_pcQ__read_fst,
       RDY_pcQ__read_snd,
       RDY_pcQ_data__read_fst,
       RDY_pcQ_data__read_snd,
       RDY_pcQ_en__read,
       RDY_pcQ_isSupplied,
       RDY_pcQ_rdy__write,
       RDY_pcQ_specCycleInputDone,
       RDY_pcQ_specCycleOutputDone,
       RDY_specCycleInputDone,
       RDY_specCycleOutputDone,
       branchPc_isSupplied,
       currEpoch__read,
       instReqQ_en__read,
       instReqQ_isSupplied,
       isSupplied,
       pcQ__read_snd,
       pcQ_data__read_snd,
       pcQ_en__read,
       pcQ_isSupplied;

  // ports of submodule epoch
  wire epoch$en, epoch$in, epoch$out;

  // ports of submodule mod__branchPc___data__w
  wire [31 : 0] mod__branchPc___data__w$in, mod__branchPc___data__w$out;
  wire mod__branchPc___data__w$en;

  // ports of submodule mod__branchPc___en__w
  wire mod__branchPc___en__w$en, mod__branchPc___en__w$out;

  // ports of submodule mod__currEpoch__w
  wire mod__currEpoch__w$en, mod__currEpoch__w$in, mod__currEpoch__w$out;

  // ports of submodule mod__instReqQ__data__w
  wire [31 : 0] mod__instReqQ__data__w$in, mod__instReqQ__data__w$out;
  wire mod__instReqQ__data__w$en;

  // ports of submodule mod__instReqQ__en__w
  wire mod__instReqQ__en__w$en, mod__instReqQ__en__w$out;

  // ports of submodule mod__instReqQ__rdy___w
  wire mod__instReqQ__rdy___w$en,
       mod__instReqQ__rdy___w$in,
       mod__instReqQ__rdy___w$out;

  // ports of submodule mod__pcQ__data__w
  wire [32 : 0] mod__pcQ__data__w$in, mod__pcQ__data__w$out;
  wire mod__pcQ__data__w$en;

  // ports of submodule mod__pcQ__en__w
  wire mod__pcQ__en__w$en, mod__pcQ__en__w$out;

  // ports of submodule mod__pcQ__rdy___w
  wire mod__pcQ__rdy___w$en, mod__pcQ__rdy___w$in, mod__pcQ__rdy___w$out;

  // ports of submodule pc
  wire [31 : 0] pc$in, pc$out;
  wire pc$en;

  // remaining internal signals
  wire [31 : 0] x1__h859;

  // value method currEpoch__read
  assign currEpoch__read = mod__currEpoch__w$out ;
  assign RDY_currEpoch__read = 1'd1 ;

  // value method pcQ_en__read
  assign pcQ_en__read = mod__pcQ__en__w$out ;
  assign RDY_pcQ_en__read = 1'd1 ;

  // action method pcQ_rdy__write
  assign RDY_pcQ_rdy__write = 1'd1 ;

  // value method pcQ_data__read_fst
  assign pcQ_data__read_fst = mod__pcQ__data__w$out[32:1] ;
  assign RDY_pcQ_data__read_fst = 1'd1 ;

  // value method pcQ_data__read_snd
  assign pcQ_data__read_snd = mod__pcQ__data__w$out[0] ;
  assign RDY_pcQ_data__read_snd = 1'd1 ;

  // value method pcQ__read_fst
  assign pcQ__read_fst = mod__pcQ__data__w$out[32:1] ;
  assign RDY_pcQ__read_fst = 1'd1 ;

  // value method pcQ__read_snd
  assign pcQ__read_snd = mod__pcQ__data__w$out[0] ;
  assign RDY_pcQ__read_snd = 1'd1 ;

  // action method pcQ_specCycleInputDone
  assign RDY_pcQ_specCycleInputDone = 1'd1 ;

  // action method pcQ_specCycleOutputDone
  assign RDY_pcQ_specCycleOutputDone = 1'd1 ;

  // value method pcQ_isSupplied
  assign pcQ_isSupplied = 1'd1 ;
  assign RDY_pcQ_isSupplied = 1'd1 ;

  // value method instReqQ_en__read
  assign instReqQ_en__read = mod__instReqQ__en__w$out ;
  assign RDY_instReqQ_en__read = 1'd1 ;

  // action method instReqQ_rdy__write
  assign RDY_instReqQ_rdy__write = 1'd1 ;

  // value method instReqQ_data__read
  assign instReqQ_data__read = mod__instReqQ__data__w$out ;
  assign RDY_instReqQ_data__read = 1'd1 ;

  // value method instReqQ__read
  assign instReqQ__read = mod__instReqQ__data__w$out ;
  assign RDY_instReqQ__read = 1'd1 ;

  // action method instReqQ_specCycleInputDone
  assign RDY_instReqQ_specCycleInputDone = 1'd1 ;

  // action method instReqQ_specCycleOutputDone
  assign RDY_instReqQ_specCycleOutputDone = 1'd1 ;

  // value method instReqQ_isSupplied
  assign instReqQ_isSupplied = 1'd1 ;
  assign RDY_instReqQ_isSupplied = 1'd1 ;

  // action method branchPc_en__read
  assign RDY_branchPc_en__read = 1'd1 ;

  // action method branchPc_data__write
  assign RDY_branchPc_data__write = 1'd1 ;

  // action method branchPc__write
  assign RDY_branchPc__write = 1'd1 ;

  // action method branchPc_specCycleInputDone
  assign RDY_branchPc_specCycleInputDone = 1'd1 ;

  // action method branchPc_specCycleOutputDone
  assign RDY_branchPc_specCycleOutputDone = 1'd1 ;

  // value method branchPc_isSupplied
  assign branchPc_isSupplied = 1'd1 ;
  assign RDY_branchPc_isSupplied = 1'd1 ;

  // action method specCycleInputDone
  assign RDY_specCycleInputDone = 1'd1 ;

  // action method specCycleOutputDone
  assign RDY_specCycleOutputDone = 1'd1 ;

  // value method isSupplied
  assign isSupplied = 1'd1 ;
  assign RDY_isSupplied = 1'd1 ;

  // submodule epoch
  mkRegU #(.width(32'd1)) epoch(.clk(CLK),
				.in(epoch$in),
				.en(epoch$en),
				.out(epoch$out));

  // submodule mod__branchPc___data__w
  mkWire #(.width(32'd32)) mod__branchPc___data__w(.in(mod__branchPc___data__w$in),
						   .en(mod__branchPc___data__w$en),
						   .out(mod__branchPc___data__w$out));

  // submodule mod__branchPc___en__w
  mkPulse mod__branchPc___en__w(.en(mod__branchPc___en__w$en),
				.out(mod__branchPc___en__w$out));

  // submodule mod__currEpoch__w
  mkWire #(.width(32'd1)) mod__currEpoch__w(.in(mod__currEpoch__w$in),
					    .en(mod__currEpoch__w$en),
					    .out(mod__currEpoch__w$out));

  // submodule mod__instReqQ__data__w
  mkWire #(.width(32'd32)) mod__instReqQ__data__w(.in(mod__instReqQ__data__w$in),
						  .en(mod__instReqQ__data__w$en),
						  .out(mod__instReqQ__data__w$out));

  // submodule mod__instReqQ__en__w
  mkPulse mod__instReqQ__en__w(.en(mod__instReqQ__en__w$en),
			       .out(mod__instReqQ__en__w$out));

  // submodule mod__instReqQ__rdy___w
  mkWire #(.width(32'd1)) mod__instReqQ__rdy___w(.in(mod__instReqQ__rdy___w$in),
						 .en(mod__instReqQ__rdy___w$en),
						 .out(mod__instReqQ__rdy___w$out));

  // submodule mod__pcQ__data__w
  mkWire #(.width(32'd33)) mod__pcQ__data__w(.in(mod__pcQ__data__w$in),
					     .en(mod__pcQ__data__w$en),
					     .out(mod__pcQ__data__w$out));

  // submodule mod__pcQ__en__w
  mkPulse mod__pcQ__en__w(.en(mod__pcQ__en__w$en), .out(mod__pcQ__en__w$out));

  // submodule mod__pcQ__rdy___w
  mkWire #(.width(32'd1)) mod__pcQ__rdy___w(.in(mod__pcQ__rdy___w$in),
					    .en(mod__pcQ__rdy___w$en),
					    .out(mod__pcQ__rdy___w$out));

  // submodule pc
  mkReg #(.width(32'd32), .init(32'd0)) pc(.clk(CLK),
					   .rst_n(RST_N),
					   .in(pc$in),
					   .en(pc$en),
					   .out(pc$out));

  // submodule epoch
  assign epoch$in = !epoch$out ;
  assign epoch$en = mod__branchPc___en__w$out ;

  // submodule mod__branchPc___data__w
  assign mod__branchPc___data__w$in =
	     EN_branchPc_data__write ?
	       branchPc_data__write_x :
	       branchPc__write_x ;
  assign mod__branchPc___data__w$en =
	     EN_branchPc_data__write || EN_branchPc__write ;

  // submodule mod__branchPc___en__w
  assign mod__branchPc___en__w$en =
	     EN_branchPc_en__read || EN_branchPc_data__write ||
	     EN_branchPc__write ;

  // submodule mod__currEpoch__w
  assign mod__currEpoch__w$in = epoch$out ;
  assign mod__currEpoch__w$en = 1'd1 ;

  // submodule mod__instReqQ__data__w
  assign mod__instReqQ__data__w$in = pc$out ;
  assign mod__instReqQ__data__w$en =
	     mod__instReqQ__rdy___w$out && mod__pcQ__rdy___w$out ;

  // submodule mod__instReqQ__en__w
  assign mod__instReqQ__en__w$en =
	     mod__instReqQ__rdy___w$out && mod__pcQ__rdy___w$out ;

  // submodule mod__instReqQ__rdy___w
  assign mod__instReqQ__rdy___w$in = instReqQ_rdy__write_x ;
  assign mod__instReqQ__rdy___w$en = EN_instReqQ_rdy__write ;

  // submodule mod__pcQ__data__w
  assign mod__pcQ__data__w$in = { x1__h859, epoch$out } ;
  assign mod__pcQ__data__w$en =
	     mod__instReqQ__rdy___w$out && mod__pcQ__rdy___w$out ;

  // submodule mod__pcQ__en__w
  assign mod__pcQ__en__w$en =
	     mod__instReqQ__rdy___w$out && mod__pcQ__rdy___w$out ;

  // submodule mod__pcQ__rdy___w
  assign mod__pcQ__rdy___w$in = pcQ_rdy__write_x ;
  assign mod__pcQ__rdy___w$en = EN_pcQ_rdy__write ;

  // submodule pc
  assign pc$in =
	     mod__branchPc___en__w$out ?
	       mod__branchPc___data__w$out :
	       x1__h859 ;
  assign pc$en = 1'd1 ;

  // remaining internal signals
  assign x1__h859 = pc$out + 32'd4 ;
endmodule  // mkFetch

