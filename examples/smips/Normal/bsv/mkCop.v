//
// Generated by Bluespec Compiler, version 2010.09.beta1 (build 21838, 2010-09-08)
//
// On Sat Mar 26 16:25:40 EDT 2011
//
// Method conflict info:
// Method: write_en__read
// Conflict-free: write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: write_en__read, write_data__write, write__write
//
// Method: write_data__write
// Conflict-free: write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: write_en__read, write_data__write, write__write
//
// Method: write__write
// Conflict-free: write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
// Conflicts: write_en__read, write_data__write, write__write
//
// Method: write_specCycleInputDone
// Conflict-free: write_en__read,
// 	       write_data__write,
// 	       write__write,
// 	       write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: write_specCycleOutputDone
// Conflict-free: write_en__read,
// 	       write_data__write,
// 	       write__write,
// 	       write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: write_isSupplied
// Conflict-free: write_en__read,
// 	       write_data__write,
// 	       write__write,
// 	       write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: read__read
// Conflict-free: write_en__read,
// 	       write_data__write,
// 	       write__write,
// 	       write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: specCycleInputDone
// Conflict-free: write_en__read,
// 	       write_data__write,
// 	       write__write,
// 	       write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: specCycleOutputDone
// Conflict-free: write_en__read,
// 	       write_data__write,
// 	       write__write,
// 	       write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
// Method: isSupplied
// Conflict-free: write_en__read,
// 	       write_data__write,
// 	       write__write,
// 	       write_specCycleInputDone,
// 	       write_specCycleOutputDone,
// 	       write_isSupplied,
// 	       read__read,
// 	       specCycleInputDone,
// 	       specCycleOutputDone,
// 	       isSupplied
//
//
// Ports:
// Name                         I/O  size props
// RDY_write_en__read             O     1 const
// RDY_write_data__write          O     1 const
// RDY_write__write               O     1 const
// RDY_write_specCycleInputDone   O     1 const
// RDY_write_specCycleOutputDone  O     1 const
// write_isSupplied               O     1 const
// RDY_write_isSupplied           O     1 const
// read__read                     O    32
// RDY_read__read                 O     1 const
// RDY_specCycleInputDone         O     1 const
// RDY_specCycleOutputDone        O     1 const
// isSupplied                     O     1 const
// RDY_isSupplied                 O     1 const
// CLK                            I     1 unused
// RST_N                          I     1 unused
// write_data__write_x            I    32
// write__write_x                 I    32
// EN_write_en__read              I     1
// EN_write_data__write           I     1
// EN_write__write                I     1
// EN_write_specCycleInputDone    I     1 unused
// EN_write_specCycleOutputDone   I     1 unused
// EN_specCycleInputDone          I     1 unused
// EN_specCycleOutputDone         I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkCop(CLK,
	     RST_N,

	     EN_write_en__read,
	     RDY_write_en__read,

	     write_data__write_x,
	     EN_write_data__write,
	     RDY_write_data__write,

	     write__write_x,
	     EN_write__write,
	     RDY_write__write,

	     EN_write_specCycleInputDone,
	     RDY_write_specCycleInputDone,

	     EN_write_specCycleOutputDone,
	     RDY_write_specCycleOutputDone,

	     write_isSupplied,
	     RDY_write_isSupplied,

	     read__read,
	     RDY_read__read,

	     EN_specCycleInputDone,
	     RDY_specCycleInputDone,

	     EN_specCycleOutputDone,
	     RDY_specCycleOutputDone,

	     isSupplied,
	     RDY_isSupplied);
  input  CLK;
  input  RST_N;

  // action method write_en__read
  input  EN_write_en__read;
  output RDY_write_en__read;

  // action method write_data__write
  input  [31 : 0] write_data__write_x;
  input  EN_write_data__write;
  output RDY_write_data__write;

  // action method write__write
  input  [31 : 0] write__write_x;
  input  EN_write__write;
  output RDY_write__write;

  // action method write_specCycleInputDone
  input  EN_write_specCycleInputDone;
  output RDY_write_specCycleInputDone;

  // action method write_specCycleOutputDone
  input  EN_write_specCycleOutputDone;
  output RDY_write_specCycleOutputDone;

  // value method write_isSupplied
  output write_isSupplied;
  output RDY_write_isSupplied;

  // value method read__read
  output [31 : 0] read__read;
  output RDY_read__read;

  // action method specCycleInputDone
  input  EN_specCycleInputDone;
  output RDY_specCycleInputDone;

  // action method specCycleOutputDone
  input  EN_specCycleOutputDone;
  output RDY_specCycleOutputDone;

  // value method isSupplied
  output isSupplied;
  output RDY_isSupplied;

  // signals for module outputs
  wire [31 : 0] read__read;
  wire RDY_isSupplied,
       RDY_read__read,
       RDY_specCycleInputDone,
       RDY_specCycleOutputDone,
       RDY_write__write,
       RDY_write_data__write,
       RDY_write_en__read,
       RDY_write_isSupplied,
       RDY_write_specCycleInputDone,
       RDY_write_specCycleOutputDone,
       isSupplied,
       write_isSupplied;

  // ports of submodule mod__read__w
  wire [31 : 0] mod__read__w$in, mod__read__w$out;
  wire mod__read__w$en;

  // ports of submodule mod__write___data__w
  wire [31 : 0] mod__write___data__w$in, mod__write___data__w$out;
  wire mod__write___data__w$en;

  // ports of submodule mod__write___en__w
  wire mod__write___en__w$en, mod__write___en__w$out;

  // action method write_en__read
  assign RDY_write_en__read = 1'd1 ;

  // action method write_data__write
  assign RDY_write_data__write = 1'd1 ;

  // action method write__write
  assign RDY_write__write = 1'd1 ;

  // action method write_specCycleInputDone
  assign RDY_write_specCycleInputDone = 1'd1 ;

  // action method write_specCycleOutputDone
  assign RDY_write_specCycleOutputDone = 1'd1 ;

  // value method write_isSupplied
  assign write_isSupplied = 1'd1 ;
  assign RDY_write_isSupplied = 1'd1 ;

  // value method read__read
  assign read__read = mod__read__w$out ;
  assign RDY_read__read = 1'd1 ;

  // action method specCycleInputDone
  assign RDY_specCycleInputDone = 1'd1 ;

  // action method specCycleOutputDone
  assign RDY_specCycleOutputDone = 1'd1 ;

  // value method isSupplied
  assign isSupplied = 1'd1 ;
  assign RDY_isSupplied = 1'd1 ;

  // submodule mod__read__w
  mkWire #(.width(32'd32)) mod__read__w(.in(mod__read__w$in),
					.en(mod__read__w$en),
					.out(mod__read__w$out));

  // submodule mod__write___data__w
  mkWire #(.width(32'd32)) mod__write___data__w(.in(mod__write___data__w$in),
						.en(mod__write___data__w$en),
						.out(mod__write___data__w$out));

  // submodule mod__write___en__w
  mkPulse mod__write___en__w(.en(mod__write___en__w$en),
			     .out(mod__write___en__w$out));

  // submodule mod__read__w
  assign mod__read__w$in = 32'h0 ;
  assign mod__read__w$en = 1'b0 ;

  // submodule mod__write___data__w
  assign mod__write___data__w$in =
	     EN_write_data__write ? write_data__write_x : write__write_x ;
  assign mod__write___data__w$en = EN_write_data__write || EN_write__write ;

  // submodule mod__write___en__w
  assign mod__write___en__w$en =
	     EN_write_en__read || EN_write_data__write || EN_write__write ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (mod__write___en__w$out && mod__write___data__w$out == 32'd1)
      $display("Passed\n");
    if (mod__write___en__w$out && mod__write___data__w$out != 32'd1)
      $display("Failed\n");
  end
  // synopsys translate_on
endmodule  // mkCop

